service: serverless-lab
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x

plugins:
  - serverless-offline
  - serverless-offline-sqs
  - serverless-dynamodb

custom:
  serverless-dynamodb:
    stages:
      - dev
    start:
      port: 8000
      region: eu-west-1
      inMemory: true
      migrate: true
  serverless-offline-sqs:
    autoCreate: true
    apiVersion: '2012-11-05'
    endpoint: http://localhost:9324
    region: us-east-1
    accessKeyId: root
    secretAccessKey: root
    skipCacheInvalidation: false

resources:
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Users
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: email-index
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
    organizationsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Organizations
        AttributeDefinitions:
          - AttributeName: organizationId
            AttributeType: S
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: organizationId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: name-index
            KeySchema:
              - AttributeName: name
                KeyType: HASH
            Projection:
              ProjectionType: ALL
    CreateOrganizationQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: create-organization-queue

    CreateUserQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: create-user-queue

    UpdateOrganizationQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: update-organization-queue

    UpdateUserQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: update-user-queue
functions:
  sqsHandler:
    handler: handler.sqsHandler
    events:
      - sqs:
          arn:
            Fn::GetAtt: [CreateOrganizationQueue, Arn]
      - sqs:
          arn:
            Fn::GetAtt: [CreateUserQueue, Arn]
      - sqs:
          arn:
            Fn::GetAtt: [UpdateOrganizationQueue, Arn]
      - sqs:
          arn:
            Fn::GetAtt: [UpdateUserQueue, Arn]